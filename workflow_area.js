// Generated by CoffeeScript 1.5.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Backbone.WorkflowArea = (function(_super) {

    __extends(WorkflowArea, _super);

    function WorkflowArea() {
      WorkflowArea.__super__.constructor.apply(this, arguments);
    }

    WorkflowArea.prototype.setupStateTransitionEvent = function() {
      return this.model.on("transition:to", this.changeState, this);
    };

    WorkflowArea.prototype.initialize = function(_arg) {
      var _ref;
      this.views = _arg.views;
      this.setupStateTransitionEvent();
      if ((_ref = this.views) == null) {
        this.views = {};
      }
      return this.createViews();
    };

    WorkflowArea.prototype.createViews = function() {
      var _this = this;
      return this.states = _.chain(this.states).filter(function(_arg) {
        var component;
        component = _arg.component;
        return _this.views[component] != null;
      }).map(function(_arg) {
        var component, state;
        state = _arg.state, component = _arg.component;
        return {
          state: state,
          component: component,
          view: new _this.views[component](_this.model)
        };
      }).value();
    };

    WorkflowArea.prototype.changeState = function() {
      this.trigger("state_change");
      this.trigger("state_change:" + (this.model.get('workflow_state')));
      return false;
    };

    WorkflowArea.prototype.getActiveState = function() {
      return this.model.get('workflow_state');
    };

    WorkflowArea.prototype.isViewActive = function() {
      return false;
    };

    return WorkflowArea;

  })(Backbone.View);

}).call(this);
