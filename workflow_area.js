// Generated by CoffeeScript 1.5.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Backbone.WorkflowArea = (function(_super) {

    __extends(WorkflowArea, _super);

    function WorkflowArea() {
      WorkflowArea.__super__.constructor.apply(this, arguments);
    }

    WorkflowArea.prototype.setupStateTransitionEvent = function() {
      return this.model.on("transition:to", this.changeState, this);
    };

    WorkflowArea.prototype.initialize = function(_arg) {
      var _ref;
      this.views = _arg.views;
      this.setupStateTransitionEvent();
      if ((_ref = this.views) == null) {
        this.views = {};
      }
      this.state = this.model.get('workflow_state');
      return this.createViews();
    };

    WorkflowArea.prototype.createViews = function() {
      var _this = this;
      return this.states = _.chain(this.states).filter(function(_arg) {
        var component;
        component = _arg.component;
        return _this.views[component] != null;
      }).map(function(_arg) {
        var component, state;
        state = _arg.state, component = _arg.component;
        return {
          state: state,
          component: component,
          view: new _this.views[component]({
            model: _this.model
          })
        };
      }).map(function(component) {
        component.view.parent = _this;
        return component;
      }).value();
    };

    WorkflowArea.prototype.changeState = function() {
      var newState, newView, oldView, state;
      state = this.state;
      oldView = this.getViewByName(state);
      newState = this.model.get('workflow_state');
      this.trigger("state_change");
      this.trigger("state_change:" + (this.model.get('workflow_state')));
      newView = this.getViewByName(newState);
      oldView.trigger("deactivate");
      newView.trigger("activate");
      this.state = newState;
      this.render();
      return false;
    };

    WorkflowArea.prototype.getActiveState = function() {
      return this.model.get('workflow_state');
    };

    WorkflowArea.prototype.getActiveView = function() {
      var stateName;
      stateName = this.getActiveState();
      return this.getViewByName(stateName);
    };

    WorkflowArea.prototype.render = function() {
      var activeView;
      activeView = this.getActiveView();
      activeView.render();
      this.$el.html(activeView.$el);
      return this;
    };

    WorkflowArea.prototype.getViewByName = function(name) {
      var _ref;
      return (_ref = _.findWhere(this.states, {
        state: name
      })) != null ? _ref.view : void 0;
    };

    WorkflowArea.prototype.isViewActive = function(view) {
      return view === this.getActiveView();
    };

    return WorkflowArea;

  })(Backbone.View);

}).call(this);
