// Generated by CoffeeScript 1.5.0
(function() {
  var LoginArea, User,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  User = (function(_super) {

    __extends(User, _super);

    function User() {
      User.__super__.constructor.apply(this, arguments);
    }

    User.prototype.workflow = {
      initial: 'guest',
      events: [
        {
          name: 'login',
          from: 'guest',
          to: 'user'
        }, {
          name: 'logout',
          from: 'user',
          to: 'guest'
        }
      ]
    };

    User.prototype.initialize = function() {
      return _.extend(this, new Backbone.Workflow(this));
    };

    return User;

  })(Backbone.Model);

  LoginArea = (function(_super) {

    __extends(LoginArea, _super);

    function LoginArea() {
      LoginArea.__super__.constructor.apply(this, arguments);
    }

    LoginArea.prototype.states = [
      {
        state: "guest",
        component: "login"
      }, {
        state: "user",
        component: "logout"
      }
    ];

    return LoginArea;

  })(Backbone.WorkflowArea);

  module("Workflow Area", {
    setup: function() {
      return false;
    }
  });

  test("Setup View Test ", function() {
    var la, user;
    user = new User();
    la = new LoginArea({
      model: user
    });
    deepEqual(la.model, user, "Test that we have the correct model");
    return equal("guest", la.getActiveState(), "Test that we have the correct state");
  });

  test("Event Binding Test ", function() {
    var la, user;
    user = new User();
    expect(5);
    user.on = function(event, callback, context) {
      equal("transition:to", event, "Test the event name");
      ok(_.isFunction(callback), "Test the event callback");
      return ok(_.isObject(context), "Test that we have a context object");
    };
    la = new LoginArea({
      model: user
    });
    deepEqual(la.model, user, "Test that we have the correct model");
    return equal("guest", la.getActiveState(), "Test that we have the correct state");
  });

}).call(this);
