// Generated by CoffeeScript 1.5.0
(function() {
  var DualPersonalityUser, InitialFlow, NoInitialFlow, NoWorkflow, User,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  User = (function(_super) {

    __extends(User, _super);

    function User() {
      this.initialize = __bind(this.initialize, this);
      User.__super__.constructor.apply(this, arguments);
    }

    User.prototype.workflow = {
      initial: 'visitor',
      events: [
        {
          name: 'signUp',
          from: 'visitor',
          to: 'user'
        }, {
          name: 'bail',
          from: 'visitor',
          to: 'lostUser'
        }, {
          name: 'closeAccount',
          from: 'user',
          to: 'visitor'
        }, {
          name: 'promote',
          from: 'user',
          to: 'superUser'
        }
      ]
    };

    User.prototype.initialize = function() {
      return _.extend(this, new Backbone.Workflow(this, {
        attrName: 'workflow_blate'
      }));
    };

    return User;

  })(Backbone.Model);

  DualPersonalityUser = (function(_super) {

    __extends(DualPersonalityUser, _super);

    function DualPersonalityUser() {
      this.initialize = __bind(this.initialize, this);
      DualPersonalityUser.__super__.constructor.apply(this, arguments);
    }

    DualPersonalityUser.prototype.jekyll_workflow = {
      initial: 'happy',
      events: [
        {
          name: 'stub_toe',
          from: 'happy',
          to: 'hurting'
        }, {
          name: 'get_massage',
          from: 'hurting',
          to: 'happy'
        }
      ]
    };

    DualPersonalityUser.prototype.hyde_workflow = {
      initial: 'catatonic',
      events: [
        {
          name: 'stub_toe',
          from: 'catatonic',
          to: 'ticked'
        }, {
          name: 'get_massage',
          from: 'ticked',
          to: 'catatonic'
        }
      ]
    };

    DualPersonalityUser.prototype.initialize = function() {
      var workflows;
      workflows = [
        {
          name: 'jekyll_workflow',
          attrName: 'jekyll_workflow_state'
        }, {
          name: 'hyde_workflow',
          attrName: 'hyde_workflow_state'
        }
      ];
      return _.extend(this, new Backbone.Workflow(this, {}, workflows));
    };

    return DualPersonalityUser;

  })(Backbone.Model);

  InitialFlow = (function(_super) {

    __extends(InitialFlow, _super);

    function InitialFlow() {
      this.initialize = __bind(this.initialize, this);
      InitialFlow.__super__.constructor.apply(this, arguments);
    }

    InitialFlow.prototype.workflow = {
      initial: 'visitor'
    };

    InitialFlow.prototype.initialize = function() {
      this.set('workflow_state', 'user', {
        silent: true
      });
      return _.extend(this, new Backbone.Workflow(this));
    };

    return InitialFlow;

  })(Backbone.Model);

  NoInitialFlow = (function(_super) {

    __extends(NoInitialFlow, _super);

    function NoInitialFlow() {
      this.initialize = __bind(this.initialize, this);
      NoInitialFlow.__super__.constructor.apply(this, arguments);
    }

    NoInitialFlow.prototype.workflow = {};

    NoInitialFlow.prototype.initialize = function() {
      return _.extend(this, new Backbone.Workflow(this));
    };

    return NoInitialFlow;

  })(Backbone.Model);

  NoWorkflow = (function(_super) {

    __extends(NoWorkflow, _super);

    function NoWorkflow() {
      NoWorkflow.__super__.constructor.apply(this, arguments);
    }

    return NoWorkflow;

  })(Backbone.Model);

  $(document).ready(function() {
    var _this = this;
    module('basic workflow', {
      setup: function() {
        return _this.user = new User();
      }
    });
    test('do nothing if no workflow state is delcared', function() {
      return ok(function() {
        var model;
        model = new NoWorkflow();
        return equal(model.get('workflow_state'), null);
      });
    });
    test('error for no initial state', function() {
      return raises(function() {
        var model;
        return model = new NoInitialFlow();
      });
    });
    test('user has initial workflow state', function() {
      return equal(_this.user.get('workflow_blate'), 'visitor');
    });
    test('user has custom initial workflow state', function() {
      var model;
      model = new InitialFlow();
      return equal('user', model.get('workflow_state'));
    });
    test('triggerEvent to new state', function() {
      equal(_this.user.triggerEvent('signUp'), true);
      equal(_this.user.get('workflow_blate'), 'user');
      equal(_this.user.triggerEvent('closeAccount'), true);
      return equal(_this.user.get('workflow_blate'), 'visitor');
    });
    test('error if no event for current state', function() {
      return raises(function() {
        return equal(_this.user.triggerEvent('closeAccount'), false);
      });
    });
    test('custom attributes name', function() {
      return equal(_this.user.get('workflow_blate'), 'visitor');
    });
    module('triggerEvents', {
      setup: function() {
        return _this.user = new User();
      }
    });
    test('transition:from', function() {
      var i;
      i = 0;
      _this.user.on('transition:from:visitor', function() {
        return i = 1;
      });
      _this.user.triggerEvent('signUp');
      return equal(i, 1);
    });
    test('transition:to', function() {
      var i;
      i = 0;
      _this.user.on('transition:from:visitor', function() {
        return i = 1;
      });
      _this.user.on('transition:to:user', function() {
        return i = 2;
      });
      _this.user.triggerEvent('signUp');
      return equal(i, 2);
    });
    test('option to persist to server', function() {
      return _this.user.triggerEvent('signUp');
    });
    module('multiple workflows', {
      setup: function() {
        return _this.user = new DualPersonalityUser();
      }
    });
    test('set up two workflows', function() {
      equal(_this.user.get('jekyll_workflow_state'), 'happy');
      return equal(_this.user.get('hyde_workflow_state'), 'catatonic');
    });
    test('error on non-existent workflow', function() {
      return raises(function() {
        return equal(_this.user.triggerEvent('stub_toe', 'fake_workflow'), false);
      });
    });
    test('triggerEvent on two workflows', function() {
      equal(_this.user.triggerEvent('stub_toe', 'jekyll_workflow'), true);
      equal(_this.user.get('jekyll_workflow_state'), 'hurting');
      equal(_this.user.triggerEvent('stub_toe', 'hyde_workflow'), true);
      return equal(_this.user.get('hyde_workflow_state'), 'ticked');
    });
    test('transition:from multiple workflows', function() {
      var i;
      i = 0;
      _this.user.on('transition:from:jekyll_workflow:happy', function() {
        return i = 1;
      });
      _this.user.triggerEvent('stub_toe', 'jekyll_workflow');
      return equal(i, 1);
    });
    return test('transition:to multiple workflows', function() {
      var i;
      i = 0;
      _this.user.on('transition:from:jekyll_workflow:happy', function() {
        return i = 1;
      });
      _this.user.on('transition:to:jekyll_workflow:hurting', function() {
        return i = 2;
      });
      _this.user.triggerEvent('stub_toe', 'jekyll_workflow');
      return equal(i, 2);
    });
  });

}).call(this);
